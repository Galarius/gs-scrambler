//
//  main.cpp
//  core
//
//  Created by Galarius on 06.05.15.
//  Copyright (c) 2015 galarius. All rights reserved.
//

#include "gsc_sync.h"
#include "gsc_core.h"
#include <iostream>
#include "gsc_helper.h"
#include "profiler.h"

typedef int8_t Binary;
typedef int16_t Integer16;

using namespace gsc;

template <typename T>
void printArray(T *arr, size_t size)
{
    for(size_t i = 0; i < size; ++i)
        std::cout <<static_cast<int16_t>(arr[i]) << " ";
    std::cout<<std::endl;
}

void tests()
{    
    // test str_2_vec
    char src[] = "ABCDEFJHIGKLMNOPQRSTUVWXYZabsdefghijklmnopqrstuvwxyz";
    int size = (int)strlen(src);
    short int *dest = 0;
    size_t d_size = strToIntegerArray(src, size, &dest);
    printArray(dest, d_size);
    // test vec_2_str
    char *src_back = 0;
    integerArrayToStr(dest, d_size, &src_back);
    printArray(src_back, size);
    delete_arr_primitive_s(&dest);
    delete_arr_primitive_s(&src_back);
    // test D2B
    int16_t i = 32700;
    Binary *binary = 0;
    int16_t s = integerToBits(i, &binary);
    printArray(binary, s);
    // test B2D
    int16_t x;
    bitsToInteger(binary, x);
    printf("%i", x);
    std::cout<<std::endl;
    delete_arr_primitive_s(&binary);
    // hide/recover
    printf("Test hide/recover\n");
    Integer16 container[] = {-5294, -4661, -5481, -6014, -6752, -6595, -5346, -6917, -8154, -7341, -7738, -6504, -7334, -10707, -8638, -5041, -7045, -10797, -7728, -4751, -9675, -12935, -8877, -9395, -6890, -5223, -9325, -8387, -10245, -9641, -6653, -8495, -8573, -9650, -11633, -6337, -5225, -10700, -9312, -6842, -8211, -8734, -7795, -7104, -7304, -6877, -7377, -7657, -5957, -5924, -8177, -7313, -4901, -5923, -6529, -4955, -3846, -4773, -4384, -4425, -4805, -4236, -4214, -3123, -2499, -435, -1785, -4812, -1304, 66, -1720, -1073, 706, 1025, 304, 685, -715, 905, 5120, 1856, -735, 3696, 4794, 3251, 4439, 5884, 5806, 2732, 4394, 8125, 6599, 6806, 6896, 5975, 9521, 11141, 5464, 5471, 10388, 8936, 9846, 11098, 10702, 11067, 11456, 11675, 11774, 12021, 11856, 14336, 14329, 10321, 12683, 13700, 13777, 16405, 15099, 15057, 15514, 15079, 14373, 14039, 15019, 14723, 14710, 15139, 16137, 15568, 15220, 16306, 16852, 15926, 15890, 14657, 14397, 16925, 16249, 16157, 15966, 14062, 16202, 17725, 15427, 15441, 17433, 17422, 16541, 16836, 15612, 15844, 16301, 15171, 13929, 16455, 18207, 16817, 17808, 15442, 15375, 18263, 16530, 13045, 14981, 16159, 15465, 16859, 14642, 13631, 16194, 16155, 17429, 17413, 12663, 13555, 12213, 13643, 17702, 14124, 13976, 13984, 12624, 12649, 12444, 15971, 14356, 9073, 12406, 15232, 11754, 10855, 10557, 8682, 11873, 12064, 10769, 11623, 11178, 9947, 5891, 8740, 11590, 7262, 6241, 9206, 9050, 7325, 7467, 5201, 5486, 8307, 5852, 3608, 5116, 4897, 4692, 5222, 3359, 3003, 3701, 2786, 1217, 1391, 1636, 637, 98, 1532, 2872, -1441, -2390, 1681, 593, -2043, -1940, -5090, -3578, 33, -3734, -4911, -2823, -3066, -5527, -5641, -2735, -4172, -9396, -7539, -5535, -7357, -6574, -7190, -7683, -7493, -7793, -8570, -8913, -9592, -10022, -10295, -10580, -10453, -10994, -11108, -11427, -10759, -13974, -14563, -12137, -13077, -12056, -12206, -13297, -14304, -17366, -14837, -12012, -14948, -15856, -16129, -17412, -12738, -15219, -18386, -16979, -20127, -17466, -14090, -18203, -18262, -18230, -19226, -17384, -17799, -19217, -18472, -19229, -19459, -19563, -18751, -17690, -18114, -17598, -20620, -21048, -19134, -20080, -19128, -19250, -19396, -18176, -16671, -19672, -20993, -18476, -19284, -20526, -19936, -17832, -18663, -19672, -19512, -21075, -18375, -16080, -18922, -18375, -17929, -18710, -20683, -19963, -16330, -18319, -19621, -17943, -17669, -15644, -13342, -20875, -21992, -16312, -17980, -15179, -15551, -18863, -16449, -15836, -15690, -14194, -16601, -17269, -15609, -16059, -14277, -14250, -15213, -13929, -12773, -14410, -16076, -13483, -13110, -13705, -12884, -12110, -11740, -11399, -11693, -14127, -11742, -9218, -11774, -12171, -10383, -10344, -8351, -7648, -10859, -10138, -11299, -9957, -5605, -7820, -7433, -7557, -8592, -5085, -4645, -8175, -6912, -3989, -4557, -3171, -4331, -7502, -2712, -102, -2697, -1394, -2425, -2736, -1065, -1263, -191, -165, -582, 1088, 2739, 1657, 1994, 1938, 1495, 1411, 1586, 4354, 4112, 4619, 4482, 2793, 5040, 5962, 4743, 5199, 6618, 6524, 4165, 5620, 10238, 7638, 4567, 7862, 8653, 6727, 6656, 9449, 9949, 8609, 9317, 8132, 8857, 11152, 9136, 6922, 9608, 10321, 10584, 12099, 10438, 10703, 10052, 10285, 12915, 10919, 7630, 11098, 13062, 11019, 11860, 12615, 11888, 11980, 12071, 12158, 12243, 12325, 12400, 12480, 12544, 13135, 13181, 13317, 13351, 13432, 13455, 14116, 14123, 13661, 13677, 14970, 14947, 13673, 13672, 14552, 14527, 13463, 13455, 14676, 14629, 14210, 14166, 13963, 13913, 14905, 14822, 15913, 15792, 14941, 14821, 14968, 14832, 14553, 14423, 15422, 15271, 15879, 15704, 14873, 14705, 14560, 14391, 13992, 13830, 14460, 14272, 14056, 13863, 14431, 14255, 14078, 13898, 13715, 13529, 13347, 13156, 12969, 12781, 12584, 12399, 12203, 12008, 11820, 11615, 11426, 11223, 11026, 10827, 10625, 10419, 10218, 10011, 9804, 9595, 9385, 9174, 8960, 8749, 8527, 8314, 8093, 7871, 7654, 7425, 7207, 6976, 6752, 6522, 6294, 6061, 5833, 5599, 5365, 5132, 4898, 4662, 4430, 4194, 3952, 3730, 3472, 3257, 2999, 2776, 2526, 2296, 2053, 1817, 1576, 1344, 1101, 871, 631, 398, 169, -70, -289, -526, -744, -968, -1189, -1403, -1620, -1832, -2039, -2243, -2445, -2646, -2837, -3033, -3799, -4064, -4162, -4421, -3885, -4050, -4338, -4578, -4941, -5171, -5308, -5534, -5885, -6092, -6608, -6786, -7570, -7719, -6974, -7136, -7052, -7213, -7909, -8051, -7733, -7876, -7889, -8025, -8383, -8506, -9060, -9162, -9516, -9603, -9095, -9191, -9655, -9732, -9775, -9853, -10529, -10595, -10622, -10685, -10465, -10526, -11244, -11273, -11056, -11077, -11102, -11124, -10716, -10746, -12217, -12206, -12176, -12156, -12477, -12444, -12309, -12269, -11609, -11574, -11343, -11310, -11594, -11561, -11093, -11069, -10632, -10616, -11006, -10976, -10984, -10944, -11325, -11264, -10242, -10192, -10552, -10488, -11299, -11214, -11600, -11492, -10996, -10882, -10801, -10684, -11163, -11027, -10118, -9994, -10695, -10555, -10211, -10073, -10714, -10550, -10527, -10354, -10242, -10067, -10641, -10444, -10261, -10054, -9364, -9167, -10138, -9917, -9299, -9087, -8708, -8501, -8436, -8229, -8581, -8363, -8308, -8082, -7243, -7031, -6790, -6581, -6773, -6557, -6783, -6556, -6316, -6084, -6563, -6312, -5468, -5236, -5395, -5154, -4965, -4717, -3853, -3614, -3901, -3656, -3506, -3265, -3881, -3619, -2805, -2554, -2065, -1824, -1648, -1399, -1558, -1293, -790, -528, -704, -439, 13, 268, -269, 4, 1368, 1622, 1522, 1784, 1829, 2094, 1480, 1756, 3148, 3386, 2438, 2700, 2740, 3009, 3288, 3548, 4128, 4367, 4813, 5042, 4244, 4487, 5328, 5547, 5555, 5766, 6634, 6817, 6135, 6327, 6966, 7140, 6882, 7046, 7319, 7469, 7314, 7458, 7597, 7733, 8552, 8664, 9028, 9127, 8982, 9077, 9242, 9326, 9615, 9684, 9905, 9965, 10168, 10220, 10800, 10833, 11027, 11055, 10701, 10736, 10723, 10750, 11435, 11443, 11171, 11185, 11999, 12005, 11003, 11036, 11194, 11219, 11306, 11323, 11006, 11029, 11288, 11310, 11195, 11213, 11795, 11787, 12032, 12010, 12469, 12422, 12554, 12493, 11724, 11676, 12122, 12067, 12015, 11957, 11309, 11259, 11614, 11553, 10834, 10788, 11172, 11111, 11495, 11417, 12049, 11953, 11673, 11573, 11405, 11300, 12377, 12244, 10346, 10241, 11048, 10927, 11020, 10899, 10694, 10562, 10127, 9992, 10006, 9874, 10933, 10783, 9649, 9514, 9155, 9020, 9590, 9441, 8943, 8801, 8946, 8798, 8733, 8577, 8192, 8037, 8657, 8488, 8374, 8205, 8161, 7986, 7455, 7287, 7509, 7329, 6918, 6733, 6684, 6498, 6762, 6577, 5798, 5630, 5168, 5010, 4975, 4816, 5103, 4930, 4966, 4782, 4551, 4368, 4249, 4056, 3968, 3766, 3213, 3024, 2805, 2621, 2055, 1874, 2105, 1915, 1653, 1459, 885, 698, -489, -648, -669, -824, -1215, -1361, -2199, -2332, -1987, -2137, -1750, -1922, -1502, -1696, -2332, -2522, -2245, -2448, -3965, -4145, -4864, -5033, -4965, -5138, -5310, -5482, -5266, -5435, -5773, -5931, -5768, -5936, -5563, -5754, -6510, -6696, -7202, -7378, -7277, -7451, -6684, -6866, -7480, -7639, -7114, -7271, -7835, -7979, -7802, -7948, -8767, -8891, -8906, -9018, -9795, -9885, -10185, -10263, -9996, -10072, -10550, -10608, -10048, -10116, -10745, -10798, -10839, -10885, -11117, -11150, -10478, -10520, -10646, -10684, -10484, -10526, -9877, -9935, -10013, -10069};
    Integer16 *container_dynamic = 0;
    new_arr_primitive_s(&container_dynamic, 1024);
    for(int i = 0; i < 1024; ++i)
        container_dynamic[i] = container[i];
    size_t semi_period = calculate_semi_period(container, 1024);
    size_t step = size_t(1024.0f / semi_period);
    Binary *stream = 0;
    new_arr_primitive_s(&stream, 105);
    for(int i = 0; i < 105; ++i)
        stream[i] = i % 2 > 0 ? 1 : 0;
    printArray<Binary>(stream, 105);
    integrate<int16_t, Binary>(&container_dynamic, 1024, semi_period, step, stream, 105);
    delete_arr_primitive_s(&stream);
    size_t l = deintegrate(container_dynamic, 1024, semi_period, step, &stream);
    printArray<Binary>(stream, l);
    delete_arr_primitive_s(&container_dynamic);
    // test contains
    Integer16 *small = 0;
    size_t small_size = 10;
    new_arr_primitive_s(&small, small_size);
    for(int i = 0; i < small_size; ++i)
        small[i] = i;
    Integer16 *big = 0;
    size_t big_size = 30;
    new_arr_primitive_s(&big, big_size);
    for(int i = -15; i < 15; ++i)
        big[i+15] = i;
    size_t p = 0;
    bool res = contains(small, small_size, big, big_size, p);
    std::cout << res << std::endl;
    printf("Test semi_period calculation\n");
    container_dynamic = 0;
    new_arr_primitive_s(&container_dynamic, 1024);
    for(int i = 0; i < 1024; ++i)
        container_dynamic[i] = container[i];
    CLOCK_START
    semi_period = calculate_semi_period(container, 1024);
    printf("%f sec\n", ELAPSED_TIME);
    printf("%zu \n", semi_period);
    delete_arr_primitive_s(&container_dynamic);
    //--------------------------
//    printf("Test core class\n");
//    Binary mark[10] {0, 1, 0, 0, 1, 0, 1, 0, 1, 0};
//    Binary msg[7] {0, 1, 0, 0, 1, 0, 1};
//    ICore *core = createCoreInstance(mark, 10, 1024, 3 * 1024);
//    container_dynamic = 0;
//    Integer16 *seed_dynamic = 0;
//    new_arr_primitive_s(&container_dynamic, 1024);
//    new_arr_primitive_s(&seed_dynamic, 1024);
//    for(int i = 0; i < 1024; ++i) {
//        container_dynamic[i] = container[i];
//        seed_dynamic[i] = container[i];
//    }
//    //--------------------------
//    core->hide(seed_dynamic, 1024, &container_dynamic, 1024, msg, 7);
//    core->hide(seed_dynamic, 1024, &container_dynamic, 1024, msg, 7);
//    //--------------------------
//    Binary *msg_r = 0;
//    //--------------------------
//    Integer32 lmsg_r_len = core->recover(seed_dynamic, 1024, container_dynamic, 1024, &msg_r);
//    //--------------------------
//    delete_arr_primitive_s(&container_dynamic);
//    delete_arr_primitive_s(&seed_dynamic);
//    delete_arr_primitive_s(&msg_r);
//    delete core;
}

int main(int argc, const char * argv[]) {
    
    tests();
    
    return 0;
}
