//
//  main.cpp
//  core
//
//  Created by Galarius on 06.05.15.
//  Copyright (c) 2015 galarius. All rights reserved.
//

#include <iostream>
#include "gsc_helper.h"
#include "profiler.h"

using namespace gsc;

template <typename T>
void printArray(T *arr, int size)
{
    for(int i = 0; i < size; ++i)
        std::cout << arr[i] << " ";
    std::cout<<std::endl;
}

void tests()
{
    // test str_2_vec
    char src[] = "ABCDEFJHIGKLMNOPQRSTUVWXYZabsdefghijklmnopqrstuvwxyz";
    int size = (int)strlen(src);
    short int *dest = 0;
    strToIntegerArray(src, &dest, size);
    printArray(dest, size);
    // test vec_2_str
    char *src_back = 0;
    integerArrayToStr(dest, &src_back, size);
    printArray(src_back, size);
    delete_arr_primitive_s(&dest);
    delete_arr_primitive_s(&src_back);
    // test D2B
    int16_t i = 32700;
    Binary *binary = 0;
    int16_t s = integerToBits(i, &binary);
    printArray(binary, s);
    // test B2D
    int16_t x;
    bitsToInteger(binary, x);
    printf("%i", x);
    std::cout<<std::endl;
    delete_arr_primitive_s(&binary);
    // hide/recover
    printf("Test hide/recover\n");
    Integer16 container[] = {-120, 49, 272, 258, 477, 497, 495, 560, 422, 291, -32, -162, -144, -332, -240, -300, -455, -293, -252, -78, 68, 85, 269, 223, 191, 264, 286, 310, 24, -134, -244, -554, -479, -380, -382, -237, -157, -59, -39, 56, 303, 530, 846, 802, 532, 412, 246, 196, 61, -138, -150, -249, -313, -329, -318, -204, -205, -134, -24, 46, 138, 82, 128, 146, 13, 17, -54, -76, -111, -272, -234, -320, -421, -254, -38, 236, 254, 232, 422, 450, 407, 214, 107, 135, -58, -67, -183, -517, -570, -642, -504, -220, -164, -26, 20, 88, 252, 337, 597, 689, 659, 677, 398, 266, 282, 177, 64, -214, -356, -406, -566, -594, -648, -573, -415, -353, -152, -163, -190, 45, 137, 242, 332, 308, 268, 200, 236, 112, -14, 85, -17, -175, -233, -186, 29, 156, 269, 358, 358, 334, 294, 398, 414, 298, 302, 216, 31, -184, -327, -271, -282, -316, -275, -188, -74, -96, -22, 60, -18, 46, 46, -45, -66, -133, -114, -134, -134, -122, -295, -200, -4, 32, 108, 24, 0, 60, 46, 151, 183, 281, 330, 144, 61, -143, -228, -10, 6, -8, -10, 24, 144, 60, 55, 153, 192, 290, 251, 150, -32, -230, -118, -57, -54, -44, -212, -250, -280, -330, -229, -162, -52, -77, -207, -194, -264, -251, -191, -188, -44, 56, 100, -4, -210, -272, -319, -196, -50, -75, 32, 132, 115, 78, 129, 292, 366, 520, 634, 514, 460, 350, 295, 371, 282, 186, 80, -19, -90, -254, -263, -254, -318, -366, -534, -484, -320, -208, -59, -180, -237, -193, -309, -279, -247, -201, -66, 42, 242, 260, 244, 342, 324, 296, 87, -19, 121, 5, -45, 42, 160, 417, 416, 288, 182, 94, 222, 284, 280, 148, -152, -153, -102, -154, -116, -165, -130, -78, -95, -58, -148, -220, -214, -202, -176, -214, -26, 236, 268, 199, -1, -137, -221, -385, -382, -346, -298, -218, -234, -226, -276, -322, -234, -43, 223, 263, 214, 330, 395, 435, 524, 660, 726, 534, 382, 296, 98, -32, -166, -260, -267, -314, -336, -351, -260, -103, 8, 174, 224, 146, 24, -114, -44, 60, 82, 60, -152, -377, -528, -579, -473, -414, -340, -252, -152, 28, 28, 16, 126, 138, 112, 51, 106, 291, 282, 179, 62, -28, -30, -68, -6, 86, 92, 242, 456, 546, 426, 252, 282, 244, 102, 36, -58, -164, -256, -296, -326, -398, -336, -286, -322, -324, -326, -192, -10, 72, 126, 124, 186, 282, 294, 328, 260, 54, -58, -90, -200, -390, -428, -272, -122, 46, 204, 308, 394, 394, 410, 486, 448, 258, 40, -56, -136, -262, -220, -74, -106, -236, -168, -18, 22, 174, 350, 292, 146, 2, -28, 140, 230, 110, 8, -74, -310, -548, -606, -612, -552, -404, -340, -306, -230, -166, -54, 42, 30, 106, 294, 332, 308, 438, 520, 456, 414, 336, 286, 350, 286, 114, 60, 10, -110, -106, -62, -166, -170, -52, -126, -258, -194, -46, 40, 80, 80, 18, 6, 102, 160, 162, 140, 74, -68, -278, -428, -458, -354, -168, -178, -382, -394, -178, -76, -86, -30, -38, -92, 20, 122, -8, -132, -42, 90, 124, 174, 218, 164, 260, 546, 672, 542, 386, 390, 414, 298, 114, -18, -110, -256, -356, -388, -438, -352, -188, -170, -282, -382, -254, 40, 236, 226, 74, -22, -68, -98, -42, -60, -76, 52, 58, -84, -190, -232, -166, -2, 124, 156, 268, 372, 250, 188, 270, 246, 160, 92, 88, 70, 26, 104, 154, 79, -1, -11, 14, -106, -148, -72, -173, -101, 233, 351, 220, 79, 0, -154, -296, -245, -195, -170, -178, -343, -438, -371, -250, -68, 168, 322, 257, 166, 137, 54, 60, 144, 214, 238, 110, -53, -210, -304, -181, -76, -97, -102, -37, 50, 39, 103, 233, 224, 224, 158, -6, 8, 153, 237, 184, 111, 86, 19, 13, -20, -144, -149, -128, -173, -300, -462, -414, -221, -107, -113, -109, -53, -55, 39, 155, 67, -80, -229, -234, -116, -99, -34, 45, 105, 196, 195, 264, 293, 200, 244, 297, 255, 75, -124, -104, -95, -140, -161, -225, -194, -109, -1, 94, 111, 202, 214, 105, 7, -146, -185, -161, -196, -249, -348, -271, -65, 66, 106, 12, 32, 127, 154, 232, 167, 84, 90, -34, -71, 9, 101, 217, 276, 354, 324, 243, 319, 295, 226, 210, 59, -123, -305, -453, -472, -390, -286, -367, -429, -199, 25, 134, 234, 302, 276, 180, 165, 122, 21, 65, 139, 143, 77, -84, -183, -229, -247, -117, 34, 75, 13, -78, -41, 69, 128, 105, -5, -141, -222, -171, -48, -36, -79, -70, -94, -137, -150, -100, 36, 137, 226, 312, 261, 148, 22, -91, -88, -34, 37, 125, 99, -40, -129, -43, 44, -29, -71, -104, -120, 76, 227, 142, -60, -256, -273, -204, -174, -214, -296, -245, -216, -251, -143, -29, 53, 130, 166, 182, 115, 92, 42, -78, 12, 104, 64, 20, -78, -51, 59, 116, 162, 81, 32, 81, 104, 127, 25, -16, 12, -146, -231, -262, -320, -228, -158, -141, -106, -26, 75, 23, -35, -51, -81, -23, -7, 35, 83, 69, 170, 160, 78, 133, 137, 174, 222, 165, 129, 119, 139, 90, 13, 63, 59, 39, 48, -22, -17, 0, -69, -57, 55, 38, -154, -196, -113, -98, -20, 90, 160, 155, 36, -44, -24, -5, -88, -176, -187, -278, -364, -390, -431, -339, -198, -95, 27, 127, 274, 385, 411, 443, 436, 402, 228, 32, -93, -307, -219, 109, 150, 56, 5, -8, -32, 20, 192, 192, 157, 76, -209, -326, -349, -335, -225, -245, -191, -137, -135, -7, -30, -64, 46, 245, 443, 321, 238, 269, 103, 97, 151, 79, -2, -122, -187, -276, -264, -177, -318, -388, -379, -334, -102, 56, 219, 388, 488, 620, 629, 584, 417, 146, 21, -112, -191, -259, -414, -432, -436, -417, -327, -134, 196, 249, 194, 281, 293, 252, 32, -198, -267, -292, -158, -129, -248, -308, -314, -102, 94, 217, 333, 301, 333, 260, 90, 102, 123, 225, 224, 76, 61, 8, 40, 13, -83, 84, 88, 98, 187, -51, -155, -116, -27, 64, -127, -181, -196, -187, 1, -35, 54, 125, -52, -30, -113, -144, -10, 3, 108, 82};
    Integer16 *container_dynamic = 0;
    new_arr_primitive_s(&container_dynamic, 1024);
    for(int i = 0; i < 1024; ++i)
        container_dynamic[i] = container[i];
    Integer32 semi_period = calculate_semi_period(container, 1024);
    Integer32 step = Integer32(1024.0f / semi_period);
    Binary *stream = 0;
    new_arr_primitive_s(&stream, 105);
    for(int i = 0; i < 105; ++i)
        stream[i] = i % 2 > 0 ? 1 : 0;
    printArray(stream, 105);
    integrate(&container_dynamic, 1024, semi_period, step, stream);
    delete_arr_primitive_s(&stream);
    Integer32 l = deintegrate(container_dynamic, 1024, semi_period, step, &stream);
    printArray(stream, l);
    delete_arr_primitive_s(&container_dynamic);
    // test contains
    Integer16 *small = 0;
    Integer32 small_size = 10;
    new_arr_primitive_s(&small, small_size);
    for(int i = 0; i < small_size; ++i)
        small[i] = i;
    Integer16 *big = 0;
    Integer32 big_size = 30;
    new_arr_primitive_s(&big, big_size);
    for(int i = -15; i < 15; ++i)
        big[i+15] = i;
    Integer32 p = 0;
    bool res = contains(small, small_size, big, big_size, p);
    std::cout << res << std::endl;
    printf("Test semi_period calculation\n");
    container_dynamic = 0;
    new_arr_primitive_s(&container_dynamic, 1024);
    for(int i = 0; i < 1024; ++i)
        container_dynamic[i] = container[i];
    CLOCK_START
    semi_period = calculate_semi_period(container, 1024);
    printf("%f sec\n", ELAPSED_TIME);
    printf("%i \n", semi_period);
    delete_arr_primitive_s(&container_dynamic);
}

int main(int argc, const char * argv[]) {
    
    tests();
    
    return 0;
}
